Terminals unused in grammar

   IN
   ERROR


Grammatica

    0 $accept: program $end

    1 @1: %empty

    2 program: PROGRAM ID @1 opt-type-sect opt-var-sect opt-const-sect opt-module-list stat-body '.'

    3 opt-type-sect: TYPE decl-list
    4              | %empty

    5 decl-list: decl ';' decl-list
    6          | decl ';'

    7 decl: id-list ':' domain

    8 @2: %empty

    9 id-list: ID @2 ',' id-list
   10        | ID

   11 domain: atomic-domain
   12       | array-domain
   13       | ID

   14 atomic-domain: INTEGER
   15              | STRING
   16              | BOOLEAN

   17 @3: %empty

   18 array-domain: ARRAY '[' INTCONST @3 ']' OF domain

   19 opt-var-sect: VAR decl-list
   20             | %empty

   21 opt-const-sect: CONST const-list-decl
   22               | %empty

   23 const-list-decl: const-decl const-list-decl
   24                | const-decl

   25 const-decl: decl ASSIGN const ';'

   26 const: INTCONST
   27      | STRCONST
   28      | BOOLCONST
   29      | array-const

   30 array-const: '[' const-list ']'

   31 const-list: const ',' const-list
   32           | const

   33 opt-module-list: module-list
   34                | %empty

   35 module-list: module-decl module-list
   36            | module-decl

   37 module-decl: procedure-decl
   38            | function-decl

   39 @4: %empty

   40 procedure-decl: PROC ID @4 '(' opt-formal-list ')' opt-type-sect opt-var-sect opt-const-sect opt-module-list stat-body ';'

   41 @5: %empty

   42 function-decl: FUNC ID @5 '(' opt-formal-list ')' ':' domain opt-type-sect opt-const-sect opt-module-list expr-body ';'

   43 opt-formal-list: formal-list
   44                | %empty

   45 formal-list: formal-decl ',' formal-list
   46            | formal-decl

   47 formal-decl: mode decl

   48 mode: %empty
   49     | OUT
   50     | INOUT

   51 @6: %empty

   52 @7: %empty

   53 stat-body: T_BEGIN ID @6 stat-list END ID @7

   54 @8: %empty

   55 @9: %empty

   56 expr-body: T_BEGIN ID @8 expr END ID @9

   57 stat-list: stat ';' stat-list
   58          | stat ';'

   59 stat: assign-stat
   60     | if-stat
   61     | while-stat
   62     | repeat-stat
   63     | for-stat
   64     | input-stat
   65     | output-stat
   66     | module-call
   67     | BREAK
   68     | EXIT

   69 input-stat: INPUT ID

   70 output-stat: OUTPUT expr

   71 @10: %empty

   72 for-stat: FOR ID @10 ASSIGN expr TO expr DO stat-list END

   73 while-stat: WHILE expr DO stat-list END

   74 repeat-stat: REPEAT stat-list UNTIL expr

   75 if-stat: IF expr THEN stat-list opt-elsif-stat-list opt-else-stat END

   76 opt-elsif-stat-list: ELSIF expr THEN stat-list opt-elsif-stat-list
   77                    | %empty

   78 opt-else-stat: ELSE stat-list
   79              | %empty

   80 assign-stat: left-hand-side ASSIGN expr

   81 left-hand-side: ID
   82               | indexing

   83 indexing: left-hand-side '[' expr ']'

   84 expr: expr bool-op bool-term
   85     | bool-term

   86 bool-op: AND
   87        | OR

   88 bool-term: comp-term comp-op comp-term
   89          | comp-term

   90 comp-op: EQUAL
   91        | NE
   92        | GT
   93        | GE
   94        | KT
   95        | KE

   96 comp-term: comp-term add-op term
   97          | term

   98 add-op: PLUS
   99       | MINUS

  100 term: term mul-op factor
  101     | factor

  102 mul-op: MUL
  103       | DIV

  104 factor: unary-op factor
  105       | '(' expr ')'
  106       | left-hand-side
  107       | const
  108       | cond-expr
  109       | module-call

  110 unary-op: MINUS
  111         | NOT

  112 cond-expr: IF expr THEN expr opt-elsif-expr-list ELSE expr END

  113 opt-elsif-expr-list: ELSIF expr THEN expr opt-elsif-expr-list
  114                    | %empty

  115 @11: %empty

  116 module-call: ID @11 '(' opt-expr-list ')'

  117 opt-expr-list: expr-list
  118              | %empty

  119 expr-list: expr ',' expr-list
  120          | expr


Simboli terminali e regole in cui appaiono

$end (0) 0
'(' (40) 40 42 105 116
')' (41) 40 42 105 116
',' (44) 9 31 45 119
'.' (46) 2
':' (58) 7 42
';' (59) 5 6 25 40 42 57 58
'[' (91) 18 30 83
']' (93) 18 30 83
error (256)
ASSIGN (258) 25 72 80
EQUAL (259) 90
NE (260) 91
GT (261) 92
GE (262) 93
KT (263) 94
KE (264) 95
PLUS (265) 98
MINUS (266) 99 110
MUL (267) 102
DIV (268) 103
PROGRAM (269) 2
TYPE (270) 3
VAR (271) 19
CONST (272) 21
PROC (273) 40
FUNC (274) 42
IN (275)
OUT (276) 49
INOUT (277) 50
T_BEGIN (278) 53 56
END (279) 53 56 72 73 75 112
BREAK (280) 67
EXIT (281) 68
IF (282) 75 112
THEN (283) 75 76 112 113
ELSE (284) 78 112
ELSIF (285) 76 113
WHILE (286) 73
DO (287) 72 73
REPEAT (288) 74
UNTIL (289) 74
FOR (290) 72
TO (291) 72
INPUT (292) 69
OUTPUT (293) 70
AND (294) 86
OR (295) 87
NOT (296) 111
INTEGER (297) 14
STRING (298) 15
BOOLEAN (299) 16
INTCONST (300) 18 26
BOOLCONST (301) 28
STRCONST (302) 27
ID (303) 2 9 10 13 40 42 53 56 69 72 81 116
ERROR (304)
ARRAY (305) 18
OF (306) 18


Simboli nonterminali e regole in cui appaiono

$accept (60)
    nel primo membro: 0
program (61)
    nel primo membro: 2, nel secondo membro: 0
@1 (62)
    nel primo membro: 1, nel secondo membro: 2
opt-type-sect (63)
    nel primo membro: 3 4, nel secondo membro: 2 40 42
decl-list (64)
    nel primo membro: 5 6, nel secondo membro: 3 5 19
decl (65)
    nel primo membro: 7, nel secondo membro: 5 6 25 47
id-list (66)
    nel primo membro: 9 10, nel secondo membro: 7 9
@2 (67)
    nel primo membro: 8, nel secondo membro: 9
domain (68)
    nel primo membro: 11 12 13, nel secondo membro: 7 18 42
atomic-domain (69)
    nel primo membro: 14 15 16, nel secondo membro: 11
array-domain (70)
    nel primo membro: 18, nel secondo membro: 12
@3 (71)
    nel primo membro: 17, nel secondo membro: 18
opt-var-sect (72)
    nel primo membro: 19 20, nel secondo membro: 2 40
opt-const-sect (73)
    nel primo membro: 21 22, nel secondo membro: 2 40 42
const-list-decl (74)
    nel primo membro: 23 24, nel secondo membro: 21 23
const-decl (75)
    nel primo membro: 25, nel secondo membro: 23 24
const (76)
    nel primo membro: 26 27 28 29, nel secondo membro: 25 31 32 107
array-const (77)
    nel primo membro: 30, nel secondo membro: 29
const-list (78)
    nel primo membro: 31 32, nel secondo membro: 30 31
opt-module-list (79)
    nel primo membro: 33 34, nel secondo membro: 2 40 42
module-list (80)
    nel primo membro: 35 36, nel secondo membro: 33 35
module-decl (81)
    nel primo membro: 37 38, nel secondo membro: 35 36
procedure-decl (82)
    nel primo membro: 40, nel secondo membro: 37
@4 (83)
    nel primo membro: 39, nel secondo membro: 40
function-decl (84)
    nel primo membro: 42, nel secondo membro: 38
@5 (85)
    nel primo membro: 41, nel secondo membro: 42
opt-formal-list (86)
    nel primo membro: 43 44, nel secondo membro: 40 42
formal-list (87)
    nel primo membro: 45 46, nel secondo membro: 43 45
formal-decl (88)
    nel primo membro: 47, nel secondo membro: 45 46
mode (89)
    nel primo membro: 48 49 50, nel secondo membro: 47
stat-body (90)
    nel primo membro: 53, nel secondo membro: 2 40
@6 (91)
    nel primo membro: 51, nel secondo membro: 53
@7 (92)
    nel primo membro: 52, nel secondo membro: 53
expr-body (93)
    nel primo membro: 56, nel secondo membro: 42
@8 (94)
    nel primo membro: 54, nel secondo membro: 56
@9 (95)
    nel primo membro: 55, nel secondo membro: 56
stat-list (96)
    nel primo membro: 57 58, nel secondo membro: 53 57 72 73 74 75
    76 78
stat (97)
    nel primo membro: 59 60 61 62 63 64 65 66 67 68, nel secondo membro:
    57 58
input-stat (98)
    nel primo membro: 69, nel secondo membro: 64
output-stat (99)
    nel primo membro: 70, nel secondo membro: 65
for-stat (100)
    nel primo membro: 72, nel secondo membro: 63
@10 (101)
    nel primo membro: 71, nel secondo membro: 72
while-stat (102)
    nel primo membro: 73, nel secondo membro: 61
repeat-stat (103)
    nel primo membro: 74, nel secondo membro: 62
if-stat (104)
    nel primo membro: 75, nel secondo membro: 60
opt-elsif-stat-list (105)
    nel primo membro: 76 77, nel secondo membro: 75 76
opt-else-stat (106)
    nel primo membro: 78 79, nel secondo membro: 75
assign-stat (107)
    nel primo membro: 80, nel secondo membro: 59
left-hand-side (108)
    nel primo membro: 81 82, nel secondo membro: 80 83 106
indexing (109)
    nel primo membro: 83, nel secondo membro: 82
expr (110)
    nel primo membro: 84 85, nel secondo membro: 56 70 72 73 74 75
    76 80 83 84 105 112 113 119 120
bool-op (111)
    nel primo membro: 86 87, nel secondo membro: 84
bool-term (112)
    nel primo membro: 88 89, nel secondo membro: 84 85
comp-op (113)
    nel primo membro: 90 91 92 93 94 95, nel secondo membro: 88
comp-term (114)
    nel primo membro: 96 97, nel secondo membro: 88 89 96
add-op (115)
    nel primo membro: 98 99, nel secondo membro: 96
term (116)
    nel primo membro: 100 101, nel secondo membro: 96 97 100
mul-op (117)
    nel primo membro: 102 103, nel secondo membro: 100
factor (118)
    nel primo membro: 104 105 106 107 108 109, nel secondo membro:
    100 101 104
unary-op (119)
    nel primo membro: 110 111, nel secondo membro: 104
cond-expr (120)
    nel primo membro: 112, nel secondo membro: 108
opt-elsif-expr-list (121)
    nel primo membro: 113 114, nel secondo membro: 112 113
module-call (122)
    nel primo membro: 116, nel secondo membro: 66 109
@11 (123)
    nel primo membro: 115, nel secondo membro: 116
opt-expr-list (124)
    nel primo membro: 117 118, nel secondo membro: 116
expr-list (125)
    nel primo membro: 119 120, nel secondo membro: 117 119


Stato 0

    0 $accept: . program $end

    PROGRAM  shift e prosecuzione allo stato 1

    program  prosecuzione allo stato 2


Stato 1

    2 program: PROGRAM . ID @1 opt-type-sect opt-var-sect opt-const-sect opt-module-list stat-body '.'

    ID  shift e prosecuzione allo stato 3


Stato 2

    0 $accept: program . $end

    $end  shift e prosecuzione allo stato 4


Stato 3

    2 program: PROGRAM ID . @1 opt-type-sect opt-var-sect opt-const-sect opt-module-list stat-body '.'

    $default  riduzione con la regola 1 (@1)

    @1  prosecuzione allo stato 5


Stato 4

    0 $accept: program $end .

    $default  accetta


Stato 5

    2 program: PROGRAM ID @1 . opt-type-sect opt-var-sect opt-const-sect opt-module-list stat-body '.'

    TYPE  shift e prosecuzione allo stato 6

    $default  riduzione con la regola 4 (opt-type-sect)

    opt-type-sect  prosecuzione allo stato 7


Stato 6

    3 opt-type-sect: TYPE . decl-list

    ID  shift e prosecuzione allo stato 8

    decl-list  prosecuzione allo stato 9
    decl       prosecuzione allo stato 10
    id-list    prosecuzione allo stato 11


Stato 7

    2 program: PROGRAM ID @1 opt-type-sect . opt-var-sect opt-const-sect opt-module-list stat-body '.'

    VAR  shift e prosecuzione allo stato 12

    $default  riduzione con la regola 20 (opt-var-sect)

    opt-var-sect  prosecuzione allo stato 13


Stato 8

    9 id-list: ID . @2 ',' id-list
   10        | ID .

    ':'       riduzione con la regola 10 (id-list)
    $default  riduzione con la regola 8 (@2)

    @2  prosecuzione allo stato 14


Stato 9

    3 opt-type-sect: TYPE decl-list .

    $default  riduzione con la regola 3 (opt-type-sect)


Stato 10

    5 decl-list: decl . ';' decl-list
    6          | decl . ';'

    ';'  shift e prosecuzione allo stato 15


Stato 11

    7 decl: id-list . ':' domain

    ':'  shift e prosecuzione allo stato 16


Stato 12

   19 opt-var-sect: VAR . decl-list

    ID  shift e prosecuzione allo stato 8

    decl-list  prosecuzione allo stato 17
    decl       prosecuzione allo stato 10
    id-list    prosecuzione allo stato 11


Stato 13

    2 program: PROGRAM ID @1 opt-type-sect opt-var-sect . opt-const-sect opt-module-list stat-body '.'

    CONST  shift e prosecuzione allo stato 18

    $default  riduzione con la regola 22 (opt-const-sect)

    opt-const-sect  prosecuzione allo stato 19


Stato 14

    9 id-list: ID @2 . ',' id-list

    ','  shift e prosecuzione allo stato 20


Stato 15

    5 decl-list: decl ';' . decl-list
    6          | decl ';' .

    ID  shift e prosecuzione allo stato 8

    $default  riduzione con la regola 6 (decl-list)

    decl-list  prosecuzione allo stato 21
    decl       prosecuzione allo stato 10
    id-list    prosecuzione allo stato 11


Stato 16

    7 decl: id-list ':' . domain

    INTEGER  shift e prosecuzione allo stato 22
    STRING   shift e prosecuzione allo stato 23
    BOOLEAN  shift e prosecuzione allo stato 24
    ID       shift e prosecuzione allo stato 25
    ARRAY    shift e prosecuzione allo stato 26

    domain         prosecuzione allo stato 27
    atomic-domain  prosecuzione allo stato 28
    array-domain   prosecuzione allo stato 29


Stato 17

   19 opt-var-sect: VAR decl-list .

    $default  riduzione con la regola 19 (opt-var-sect)


Stato 18

   21 opt-const-sect: CONST . const-list-decl

    ID  shift e prosecuzione allo stato 8

    decl             prosecuzione allo stato 30
    id-list          prosecuzione allo stato 11
    const-list-decl  prosecuzione allo stato 31
    const-decl       prosecuzione allo stato 32


Stato 19

    2 program: PROGRAM ID @1 opt-type-sect opt-var-sect opt-const-sect . opt-module-list stat-body '.'

    PROC  shift e prosecuzione allo stato 33
    FUNC  shift e prosecuzione allo stato 34

    $default  riduzione con la regola 34 (opt-module-list)

    opt-module-list  prosecuzione allo stato 35
    module-list      prosecuzione allo stato 36
    module-decl      prosecuzione allo stato 37
    procedure-decl   prosecuzione allo stato 38
    function-decl    prosecuzione allo stato 39


Stato 20

    9 id-list: ID @2 ',' . id-list

    ID  shift e prosecuzione allo stato 8

    id-list  prosecuzione allo stato 40


Stato 21

    5 decl-list: decl ';' decl-list .

    $default  riduzione con la regola 5 (decl-list)


Stato 22

   14 atomic-domain: INTEGER .

    $default  riduzione con la regola 14 (atomic-domain)


Stato 23

   15 atomic-domain: STRING .

    $default  riduzione con la regola 15 (atomic-domain)


Stato 24

   16 atomic-domain: BOOLEAN .

    $default  riduzione con la regola 16 (atomic-domain)


Stato 25

   13 domain: ID .

    $default  riduzione con la regola 13 (domain)


Stato 26

   18 array-domain: ARRAY . '[' INTCONST @3 ']' OF domain

    '['  shift e prosecuzione allo stato 41


Stato 27

    7 decl: id-list ':' domain .

    $default  riduzione con la regola 7 (decl)


Stato 28

   11 domain: atomic-domain .

    $default  riduzione con la regola 11 (domain)


Stato 29

   12 domain: array-domain .

    $default  riduzione con la regola 12 (domain)


Stato 30

   25 const-decl: decl . ASSIGN const ';'

    ASSIGN  shift e prosecuzione allo stato 42


Stato 31

   21 opt-const-sect: CONST const-list-decl .

    $default  riduzione con la regola 21 (opt-const-sect)


Stato 32

   23 const-list-decl: const-decl . const-list-decl
   24                | const-decl .

    ID  shift e prosecuzione allo stato 8

    $default  riduzione con la regola 24 (const-list-decl)

    decl             prosecuzione allo stato 30
    id-list          prosecuzione allo stato 11
    const-list-decl  prosecuzione allo stato 43
    const-decl       prosecuzione allo stato 32


Stato 33

   40 procedure-decl: PROC . ID @4 '(' opt-formal-list ')' opt-type-sect opt-var-sect opt-const-sect opt-module-list stat-body ';'

    ID  shift e prosecuzione allo stato 44


Stato 34

   42 function-decl: FUNC . ID @5 '(' opt-formal-list ')' ':' domain opt-type-sect opt-const-sect opt-module-list expr-body ';'

    ID  shift e prosecuzione allo stato 45


Stato 35

    2 program: PROGRAM ID @1 opt-type-sect opt-var-sect opt-const-sect opt-module-list . stat-body '.'

    T_BEGIN  shift e prosecuzione allo stato 46

    stat-body  prosecuzione allo stato 47


Stato 36

   33 opt-module-list: module-list .

    $default  riduzione con la regola 33 (opt-module-list)


Stato 37

   35 module-list: module-decl . module-list
   36            | module-decl .

    PROC  shift e prosecuzione allo stato 33
    FUNC  shift e prosecuzione allo stato 34

    $default  riduzione con la regola 36 (module-list)

    module-list     prosecuzione allo stato 48
    module-decl     prosecuzione allo stato 37
    procedure-decl  prosecuzione allo stato 38
    function-decl   prosecuzione allo stato 39


Stato 38

   37 module-decl: procedure-decl .

    $default  riduzione con la regola 37 (module-decl)


Stato 39

   38 module-decl: function-decl .

    $default  riduzione con la regola 38 (module-decl)


Stato 40

    9 id-list: ID @2 ',' id-list .

    $default  riduzione con la regola 9 (id-list)


Stato 41

   18 array-domain: ARRAY '[' . INTCONST @3 ']' OF domain

    INTCONST  shift e prosecuzione allo stato 49


Stato 42

   25 const-decl: decl ASSIGN . const ';'

    INTCONST   shift e prosecuzione allo stato 50
    BOOLCONST  shift e prosecuzione allo stato 51
    STRCONST   shift e prosecuzione allo stato 52
    '['        shift e prosecuzione allo stato 53

    const        prosecuzione allo stato 54
    array-const  prosecuzione allo stato 55


Stato 43

   23 const-list-decl: const-decl const-list-decl .

    $default  riduzione con la regola 23 (const-list-decl)


Stato 44

   40 procedure-decl: PROC ID . @4 '(' opt-formal-list ')' opt-type-sect opt-var-sect opt-const-sect opt-module-list stat-body ';'

    $default  riduzione con la regola 39 (@4)

    @4  prosecuzione allo stato 56


Stato 45

   42 function-decl: FUNC ID . @5 '(' opt-formal-list ')' ':' domain opt-type-sect opt-const-sect opt-module-list expr-body ';'

    $default  riduzione con la regola 41 (@5)

    @5  prosecuzione allo stato 57


Stato 46

   53 stat-body: T_BEGIN . ID @6 stat-list END ID @7

    ID  shift e prosecuzione allo stato 58


Stato 47

    2 program: PROGRAM ID @1 opt-type-sect opt-var-sect opt-const-sect opt-module-list stat-body . '.'

    '.'  shift e prosecuzione allo stato 59


Stato 48

   35 module-list: module-decl module-list .

    $default  riduzione con la regola 35 (module-list)


Stato 49

   18 array-domain: ARRAY '[' INTCONST . @3 ']' OF domain

    $default  riduzione con la regola 17 (@3)

    @3  prosecuzione allo stato 60


Stato 50

   26 const: INTCONST .

    $default  riduzione con la regola 26 (const)


Stato 51

   28 const: BOOLCONST .

    $default  riduzione con la regola 28 (const)


Stato 52

   27 const: STRCONST .

    $default  riduzione con la regola 27 (const)


Stato 53

   30 array-const: '[' . const-list ']'

    INTCONST   shift e prosecuzione allo stato 50
    BOOLCONST  shift e prosecuzione allo stato 51
    STRCONST   shift e prosecuzione allo stato 52
    '['        shift e prosecuzione allo stato 53

    const        prosecuzione allo stato 61
    array-const  prosecuzione allo stato 55
    const-list   prosecuzione allo stato 62


Stato 54

   25 const-decl: decl ASSIGN const . ';'

    ';'  shift e prosecuzione allo stato 63


Stato 55

   29 const: array-const .

    $default  riduzione con la regola 29 (const)


Stato 56

   40 procedure-decl: PROC ID @4 . '(' opt-formal-list ')' opt-type-sect opt-var-sect opt-const-sect opt-module-list stat-body ';'

    '('  shift e prosecuzione allo stato 64


Stato 57

   42 function-decl: FUNC ID @5 . '(' opt-formal-list ')' ':' domain opt-type-sect opt-const-sect opt-module-list expr-body ';'

    '('  shift e prosecuzione allo stato 65


Stato 58

   53 stat-body: T_BEGIN ID . @6 stat-list END ID @7

    $default  riduzione con la regola 51 (@6)

    @6  prosecuzione allo stato 66


Stato 59

    2 program: PROGRAM ID @1 opt-type-sect opt-var-sect opt-const-sect opt-module-list stat-body '.' .

    $default  riduzione con la regola 2 (program)


Stato 60

   18 array-domain: ARRAY '[' INTCONST @3 . ']' OF domain

    ']'  shift e prosecuzione allo stato 67


Stato 61

   31 const-list: const . ',' const-list
   32           | const .

    ','  shift e prosecuzione allo stato 68

    $default  riduzione con la regola 32 (const-list)


Stato 62

   30 array-const: '[' const-list . ']'

    ']'  shift e prosecuzione allo stato 69


Stato 63

   25 const-decl: decl ASSIGN const ';' .

    $default  riduzione con la regola 25 (const-decl)


Stato 64

   40 procedure-decl: PROC ID @4 '(' . opt-formal-list ')' opt-type-sect opt-var-sect opt-const-sect opt-module-list stat-body ';'

    OUT    shift e prosecuzione allo stato 70
    INOUT  shift e prosecuzione allo stato 71

    ID        riduzione con la regola 48 (mode)
    $default  riduzione con la regola 44 (opt-formal-list)

    opt-formal-list  prosecuzione allo stato 72
    formal-list      prosecuzione allo stato 73
    formal-decl      prosecuzione allo stato 74
    mode             prosecuzione allo stato 75


Stato 65

   42 function-decl: FUNC ID @5 '(' . opt-formal-list ')' ':' domain opt-type-sect opt-const-sect opt-module-list expr-body ';'

    OUT    shift e prosecuzione allo stato 70
    INOUT  shift e prosecuzione allo stato 71

    ID        riduzione con la regola 48 (mode)
    $default  riduzione con la regola 44 (opt-formal-list)

    opt-formal-list  prosecuzione allo stato 76
    formal-list      prosecuzione allo stato 73
    formal-decl      prosecuzione allo stato 74
    mode             prosecuzione allo stato 75


Stato 66

   53 stat-body: T_BEGIN ID @6 . stat-list END ID @7

    BREAK   shift e prosecuzione allo stato 77
    EXIT    shift e prosecuzione allo stato 78
    IF      shift e prosecuzione allo stato 79
    WHILE   shift e prosecuzione allo stato 80
    REPEAT  shift e prosecuzione allo stato 81
    FOR     shift e prosecuzione allo stato 82
    INPUT   shift e prosecuzione allo stato 83
    OUTPUT  shift e prosecuzione allo stato 84
    ID      shift e prosecuzione allo stato 85

    stat-list       prosecuzione allo stato 86
    stat            prosecuzione allo stato 87
    input-stat      prosecuzione allo stato 88
    output-stat     prosecuzione allo stato 89
    for-stat        prosecuzione allo stato 90
    while-stat      prosecuzione allo stato 91
    repeat-stat     prosecuzione allo stato 92
    if-stat         prosecuzione allo stato 93
    assign-stat     prosecuzione allo stato 94
    left-hand-side  prosecuzione allo stato 95
    indexing        prosecuzione allo stato 96
    module-call     prosecuzione allo stato 97


Stato 67

   18 array-domain: ARRAY '[' INTCONST @3 ']' . OF domain

    OF  shift e prosecuzione allo stato 98


Stato 68

   31 const-list: const ',' . const-list

    INTCONST   shift e prosecuzione allo stato 50
    BOOLCONST  shift e prosecuzione allo stato 51
    STRCONST   shift e prosecuzione allo stato 52
    '['        shift e prosecuzione allo stato 53

    const        prosecuzione allo stato 61
    array-const  prosecuzione allo stato 55
    const-list   prosecuzione allo stato 99


Stato 69

   30 array-const: '[' const-list ']' .

    $default  riduzione con la regola 30 (array-const)


Stato 70

   49 mode: OUT .

    $default  riduzione con la regola 49 (mode)


Stato 71

   50 mode: INOUT .

    $default  riduzione con la regola 50 (mode)


Stato 72

   40 procedure-decl: PROC ID @4 '(' opt-formal-list . ')' opt-type-sect opt-var-sect opt-const-sect opt-module-list stat-body ';'

    ')'  shift e prosecuzione allo stato 100


Stato 73

   43 opt-formal-list: formal-list .

    $default  riduzione con la regola 43 (opt-formal-list)


Stato 74

   45 formal-list: formal-decl . ',' formal-list
   46            | formal-decl .

    ','  shift e prosecuzione allo stato 101

    $default  riduzione con la regola 46 (formal-list)


Stato 75

   47 formal-decl: mode . decl

    ID  shift e prosecuzione allo stato 8

    decl     prosecuzione allo stato 102
    id-list  prosecuzione allo stato 11


Stato 76

   42 function-decl: FUNC ID @5 '(' opt-formal-list . ')' ':' domain opt-type-sect opt-const-sect opt-module-list expr-body ';'

    ')'  shift e prosecuzione allo stato 103


Stato 77

   67 stat: BREAK .

    $default  riduzione con la regola 67 (stat)


Stato 78

   68 stat: EXIT .

    $default  riduzione con la regola 68 (stat)


Stato 79

   75 if-stat: IF . expr THEN stat-list opt-elsif-stat-list opt-else-stat END

    MINUS      shift e prosecuzione allo stato 104
    IF         shift e prosecuzione allo stato 105
    NOT        shift e prosecuzione allo stato 106
    INTCONST   shift e prosecuzione allo stato 50
    BOOLCONST  shift e prosecuzione allo stato 51
    STRCONST   shift e prosecuzione allo stato 52
    ID         shift e prosecuzione allo stato 85
    '['        shift e prosecuzione allo stato 53
    '('        shift e prosecuzione allo stato 107

    const           prosecuzione allo stato 108
    array-const     prosecuzione allo stato 55
    left-hand-side  prosecuzione allo stato 109
    indexing        prosecuzione allo stato 96
    expr            prosecuzione allo stato 110
    bool-term       prosecuzione allo stato 111
    comp-term       prosecuzione allo stato 112
    term            prosecuzione allo stato 113
    factor          prosecuzione allo stato 114
    unary-op        prosecuzione allo stato 115
    cond-expr       prosecuzione allo stato 116
    module-call     prosecuzione allo stato 117


Stato 80

   73 while-stat: WHILE . expr DO stat-list END

    MINUS      shift e prosecuzione allo stato 104
    IF         shift e prosecuzione allo stato 105
    NOT        shift e prosecuzione allo stato 106
    INTCONST   shift e prosecuzione allo stato 50
    BOOLCONST  shift e prosecuzione allo stato 51
    STRCONST   shift e prosecuzione allo stato 52
    ID         shift e prosecuzione allo stato 85
    '['        shift e prosecuzione allo stato 53
    '('        shift e prosecuzione allo stato 107

    const           prosecuzione allo stato 108
    array-const     prosecuzione allo stato 55
    left-hand-side  prosecuzione allo stato 109
    indexing        prosecuzione allo stato 96
    expr            prosecuzione allo stato 118
    bool-term       prosecuzione allo stato 111
    comp-term       prosecuzione allo stato 112
    term            prosecuzione allo stato 113
    factor          prosecuzione allo stato 114
    unary-op        prosecuzione allo stato 115
    cond-expr       prosecuzione allo stato 116
    module-call     prosecuzione allo stato 117


Stato 81

   74 repeat-stat: REPEAT . stat-list UNTIL expr

    BREAK   shift e prosecuzione allo stato 77
    EXIT    shift e prosecuzione allo stato 78
    IF      shift e prosecuzione allo stato 79
    WHILE   shift e prosecuzione allo stato 80
    REPEAT  shift e prosecuzione allo stato 81
    FOR     shift e prosecuzione allo stato 82
    INPUT   shift e prosecuzione allo stato 83
    OUTPUT  shift e prosecuzione allo stato 84
    ID      shift e prosecuzione allo stato 85

    stat-list       prosecuzione allo stato 119
    stat            prosecuzione allo stato 87
    input-stat      prosecuzione allo stato 88
    output-stat     prosecuzione allo stato 89
    for-stat        prosecuzione allo stato 90
    while-stat      prosecuzione allo stato 91
    repeat-stat     prosecuzione allo stato 92
    if-stat         prosecuzione allo stato 93
    assign-stat     prosecuzione allo stato 94
    left-hand-side  prosecuzione allo stato 95
    indexing        prosecuzione allo stato 96
    module-call     prosecuzione allo stato 97


Stato 82

   72 for-stat: FOR . ID @10 ASSIGN expr TO expr DO stat-list END

    ID  shift e prosecuzione allo stato 120


Stato 83

   69 input-stat: INPUT . ID

    ID  shift e prosecuzione allo stato 121


Stato 84

   70 output-stat: OUTPUT . expr

    MINUS      shift e prosecuzione allo stato 104
    IF         shift e prosecuzione allo stato 105
    NOT        shift e prosecuzione allo stato 106
    INTCONST   shift e prosecuzione allo stato 50
    BOOLCONST  shift e prosecuzione allo stato 51
    STRCONST   shift e prosecuzione allo stato 52
    ID         shift e prosecuzione allo stato 85
    '['        shift e prosecuzione allo stato 53
    '('        shift e prosecuzione allo stato 107

    const           prosecuzione allo stato 108
    array-const     prosecuzione allo stato 55
    left-hand-side  prosecuzione allo stato 109
    indexing        prosecuzione allo stato 96
    expr            prosecuzione allo stato 122
    bool-term       prosecuzione allo stato 111
    comp-term       prosecuzione allo stato 112
    term            prosecuzione allo stato 113
    factor          prosecuzione allo stato 114
    unary-op        prosecuzione allo stato 115
    cond-expr       prosecuzione allo stato 116
    module-call     prosecuzione allo stato 117


Stato 85

   81 left-hand-side: ID .
  116 module-call: ID . @11 '(' opt-expr-list ')'

    '('       riduzione con la regola 115 (@11)
    $default  riduzione con la regola 81 (left-hand-side)

    @11  prosecuzione allo stato 123


Stato 86

   53 stat-body: T_BEGIN ID @6 stat-list . END ID @7

    END  shift e prosecuzione allo stato 124


Stato 87

   57 stat-list: stat . ';' stat-list
   58          | stat . ';'

    ';'  shift e prosecuzione allo stato 125


Stato 88

   64 stat: input-stat .

    $default  riduzione con la regola 64 (stat)


Stato 89

   65 stat: output-stat .

    $default  riduzione con la regola 65 (stat)


Stato 90

   63 stat: for-stat .

    $default  riduzione con la regola 63 (stat)


Stato 91

   61 stat: while-stat .

    $default  riduzione con la regola 61 (stat)


Stato 92

   62 stat: repeat-stat .

    $default  riduzione con la regola 62 (stat)


Stato 93

   60 stat: if-stat .

    $default  riduzione con la regola 60 (stat)


Stato 94

   59 stat: assign-stat .

    $default  riduzione con la regola 59 (stat)


Stato 95

   80 assign-stat: left-hand-side . ASSIGN expr
   83 indexing: left-hand-side . '[' expr ']'

    ASSIGN  shift e prosecuzione allo stato 126
    '['     shift e prosecuzione allo stato 127


Stato 96

   82 left-hand-side: indexing .

    $default  riduzione con la regola 82 (left-hand-side)


Stato 97

   66 stat: module-call .

    $default  riduzione con la regola 66 (stat)


Stato 98

   18 array-domain: ARRAY '[' INTCONST @3 ']' OF . domain

    INTEGER  shift e prosecuzione allo stato 22
    STRING   shift e prosecuzione allo stato 23
    BOOLEAN  shift e prosecuzione allo stato 24
    ID       shift e prosecuzione allo stato 25
    ARRAY    shift e prosecuzione allo stato 26

    domain         prosecuzione allo stato 128
    atomic-domain  prosecuzione allo stato 28
    array-domain   prosecuzione allo stato 29


Stato 99

   31 const-list: const ',' const-list .

    $default  riduzione con la regola 31 (const-list)


Stato 100

   40 procedure-decl: PROC ID @4 '(' opt-formal-list ')' . opt-type-sect opt-var-sect opt-const-sect opt-module-list stat-body ';'

    TYPE  shift e prosecuzione allo stato 6

    $default  riduzione con la regola 4 (opt-type-sect)

    opt-type-sect  prosecuzione allo stato 129


Stato 101

   45 formal-list: formal-decl ',' . formal-list

    OUT    shift e prosecuzione allo stato 70
    INOUT  shift e prosecuzione allo stato 71

    $default  riduzione con la regola 48 (mode)

    formal-list  prosecuzione allo stato 130
    formal-decl  prosecuzione allo stato 74
    mode         prosecuzione allo stato 75


Stato 102

   47 formal-decl: mode decl .

    $default  riduzione con la regola 47 (formal-decl)


Stato 103

   42 function-decl: FUNC ID @5 '(' opt-formal-list ')' . ':' domain opt-type-sect opt-const-sect opt-module-list expr-body ';'

    ':'  shift e prosecuzione allo stato 131


Stato 104

  110 unary-op: MINUS .

    $default  riduzione con la regola 110 (unary-op)


Stato 105

  112 cond-expr: IF . expr THEN expr opt-elsif-expr-list ELSE expr END

    MINUS      shift e prosecuzione allo stato 104
    IF         shift e prosecuzione allo stato 105
    NOT        shift e prosecuzione allo stato 106
    INTCONST   shift e prosecuzione allo stato 50
    BOOLCONST  shift e prosecuzione allo stato 51
    STRCONST   shift e prosecuzione allo stato 52
    ID         shift e prosecuzione allo stato 85
    '['        shift e prosecuzione allo stato 53
    '('        shift e prosecuzione allo stato 107

    const           prosecuzione allo stato 108
    array-const     prosecuzione allo stato 55
    left-hand-side  prosecuzione allo stato 109
    indexing        prosecuzione allo stato 96
    expr            prosecuzione allo stato 132
    bool-term       prosecuzione allo stato 111
    comp-term       prosecuzione allo stato 112
    term            prosecuzione allo stato 113
    factor          prosecuzione allo stato 114
    unary-op        prosecuzione allo stato 115
    cond-expr       prosecuzione allo stato 116
    module-call     prosecuzione allo stato 117


Stato 106

  111 unary-op: NOT .

    $default  riduzione con la regola 111 (unary-op)


Stato 107

  105 factor: '(' . expr ')'

    MINUS      shift e prosecuzione allo stato 104
    IF         shift e prosecuzione allo stato 105
    NOT        shift e prosecuzione allo stato 106
    INTCONST   shift e prosecuzione allo stato 50
    BOOLCONST  shift e prosecuzione allo stato 51
    STRCONST   shift e prosecuzione allo stato 52
    ID         shift e prosecuzione allo stato 85
    '['        shift e prosecuzione allo stato 53
    '('        shift e prosecuzione allo stato 107

    const           prosecuzione allo stato 108
    array-const     prosecuzione allo stato 55
    left-hand-side  prosecuzione allo stato 109
    indexing        prosecuzione allo stato 96
    expr            prosecuzione allo stato 133
    bool-term       prosecuzione allo stato 111
    comp-term       prosecuzione allo stato 112
    term            prosecuzione allo stato 113
    factor          prosecuzione allo stato 114
    unary-op        prosecuzione allo stato 115
    cond-expr       prosecuzione allo stato 116
    module-call     prosecuzione allo stato 117


Stato 108

  107 factor: const .

    $default  riduzione con la regola 107 (factor)


Stato 109

   83 indexing: left-hand-side . '[' expr ']'
  106 factor: left-hand-side .

    '['  shift e prosecuzione allo stato 127

    $default  riduzione con la regola 106 (factor)


Stato 110

   75 if-stat: IF expr . THEN stat-list opt-elsif-stat-list opt-else-stat END
   84 expr: expr . bool-op bool-term

    THEN  shift e prosecuzione allo stato 134
    AND   shift e prosecuzione allo stato 135
    OR    shift e prosecuzione allo stato 136

    bool-op  prosecuzione allo stato 137


Stato 111

   85 expr: bool-term .

    $default  riduzione con la regola 85 (expr)


Stato 112

   88 bool-term: comp-term . comp-op comp-term
   89          | comp-term .
   96 comp-term: comp-term . add-op term

    EQUAL  shift e prosecuzione allo stato 138
    NE     shift e prosecuzione allo stato 139
    GT     shift e prosecuzione allo stato 140
    GE     shift e prosecuzione allo stato 141
    KT     shift e prosecuzione allo stato 142
    KE     shift e prosecuzione allo stato 143
    PLUS   shift e prosecuzione allo stato 144
    MINUS  shift e prosecuzione allo stato 145

    $default  riduzione con la regola 89 (bool-term)

    comp-op  prosecuzione allo stato 146
    add-op   prosecuzione allo stato 147


Stato 113

   97 comp-term: term .
  100 term: term . mul-op factor

    MUL  shift e prosecuzione allo stato 148
    DIV  shift e prosecuzione allo stato 149

    $default  riduzione con la regola 97 (comp-term)

    mul-op  prosecuzione allo stato 150


Stato 114

  101 term: factor .

    $default  riduzione con la regola 101 (term)


Stato 115

  104 factor: unary-op . factor

    MINUS      shift e prosecuzione allo stato 104
    IF         shift e prosecuzione allo stato 105
    NOT        shift e prosecuzione allo stato 106
    INTCONST   shift e prosecuzione allo stato 50
    BOOLCONST  shift e prosecuzione allo stato 51
    STRCONST   shift e prosecuzione allo stato 52
    ID         shift e prosecuzione allo stato 85
    '['        shift e prosecuzione allo stato 53
    '('        shift e prosecuzione allo stato 107

    const           prosecuzione allo stato 108
    array-const     prosecuzione allo stato 55
    left-hand-side  prosecuzione allo stato 109
    indexing        prosecuzione allo stato 96
    factor          prosecuzione allo stato 151
    unary-op        prosecuzione allo stato 115
    cond-expr       prosecuzione allo stato 116
    module-call     prosecuzione allo stato 117


Stato 116

  108 factor: cond-expr .

    $default  riduzione con la regola 108 (factor)


Stato 117

  109 factor: module-call .

    $default  riduzione con la regola 109 (factor)


Stato 118

   73 while-stat: WHILE expr . DO stat-list END
   84 expr: expr . bool-op bool-term

    DO   shift e prosecuzione allo stato 152
    AND  shift e prosecuzione allo stato 135
    OR   shift e prosecuzione allo stato 136

    bool-op  prosecuzione allo stato 137


Stato 119

   74 repeat-stat: REPEAT stat-list . UNTIL expr

    UNTIL  shift e prosecuzione allo stato 153


Stato 120

   72 for-stat: FOR ID . @10 ASSIGN expr TO expr DO stat-list END

    $default  riduzione con la regola 71 (@10)

    @10  prosecuzione allo stato 154


Stato 121

   69 input-stat: INPUT ID .

    $default  riduzione con la regola 69 (input-stat)


Stato 122

   70 output-stat: OUTPUT expr .
   84 expr: expr . bool-op bool-term

    AND  shift e prosecuzione allo stato 135
    OR   shift e prosecuzione allo stato 136

    $default  riduzione con la regola 70 (output-stat)

    bool-op  prosecuzione allo stato 137


Stato 123

  116 module-call: ID @11 . '(' opt-expr-list ')'

    '('  shift e prosecuzione allo stato 155


Stato 124

   53 stat-body: T_BEGIN ID @6 stat-list END . ID @7

    ID  shift e prosecuzione allo stato 156


Stato 125

   57 stat-list: stat ';' . stat-list
   58          | stat ';' .

    BREAK   shift e prosecuzione allo stato 77
    EXIT    shift e prosecuzione allo stato 78
    IF      shift e prosecuzione allo stato 79
    WHILE   shift e prosecuzione allo stato 80
    REPEAT  shift e prosecuzione allo stato 81
    FOR     shift e prosecuzione allo stato 82
    INPUT   shift e prosecuzione allo stato 83
    OUTPUT  shift e prosecuzione allo stato 84
    ID      shift e prosecuzione allo stato 85

    $default  riduzione con la regola 58 (stat-list)

    stat-list       prosecuzione allo stato 157
    stat            prosecuzione allo stato 87
    input-stat      prosecuzione allo stato 88
    output-stat     prosecuzione allo stato 89
    for-stat        prosecuzione allo stato 90
    while-stat      prosecuzione allo stato 91
    repeat-stat     prosecuzione allo stato 92
    if-stat         prosecuzione allo stato 93
    assign-stat     prosecuzione allo stato 94
    left-hand-side  prosecuzione allo stato 95
    indexing        prosecuzione allo stato 96
    module-call     prosecuzione allo stato 97


Stato 126

   80 assign-stat: left-hand-side ASSIGN . expr

    MINUS      shift e prosecuzione allo stato 104
    IF         shift e prosecuzione allo stato 105
    NOT        shift e prosecuzione allo stato 106
    INTCONST   shift e prosecuzione allo stato 50
    BOOLCONST  shift e prosecuzione allo stato 51
    STRCONST   shift e prosecuzione allo stato 52
    ID         shift e prosecuzione allo stato 85
    '['        shift e prosecuzione allo stato 53
    '('        shift e prosecuzione allo stato 107

    const           prosecuzione allo stato 108
    array-const     prosecuzione allo stato 55
    left-hand-side  prosecuzione allo stato 109
    indexing        prosecuzione allo stato 96
    expr            prosecuzione allo stato 158
    bool-term       prosecuzione allo stato 111
    comp-term       prosecuzione allo stato 112
    term            prosecuzione allo stato 113
    factor          prosecuzione allo stato 114
    unary-op        prosecuzione allo stato 115
    cond-expr       prosecuzione allo stato 116
    module-call     prosecuzione allo stato 117


Stato 127

   83 indexing: left-hand-side '[' . expr ']'

    MINUS      shift e prosecuzione allo stato 104
    IF         shift e prosecuzione allo stato 105
    NOT        shift e prosecuzione allo stato 106
    INTCONST   shift e prosecuzione allo stato 50
    BOOLCONST  shift e prosecuzione allo stato 51
    STRCONST   shift e prosecuzione allo stato 52
    ID         shift e prosecuzione allo stato 85
    '['        shift e prosecuzione allo stato 53
    '('        shift e prosecuzione allo stato 107

    const           prosecuzione allo stato 108
    array-const     prosecuzione allo stato 55
    left-hand-side  prosecuzione allo stato 109
    indexing        prosecuzione allo stato 96
    expr            prosecuzione allo stato 159
    bool-term       prosecuzione allo stato 111
    comp-term       prosecuzione allo stato 112
    term            prosecuzione allo stato 113
    factor          prosecuzione allo stato 114
    unary-op        prosecuzione allo stato 115
    cond-expr       prosecuzione allo stato 116
    module-call     prosecuzione allo stato 117


Stato 128

   18 array-domain: ARRAY '[' INTCONST @3 ']' OF domain .

    $default  riduzione con la regola 18 (array-domain)


Stato 129

   40 procedure-decl: PROC ID @4 '(' opt-formal-list ')' opt-type-sect . opt-var-sect opt-const-sect opt-module-list stat-body ';'

    VAR  shift e prosecuzione allo stato 12

    $default  riduzione con la regola 20 (opt-var-sect)

    opt-var-sect  prosecuzione allo stato 160


Stato 130

   45 formal-list: formal-decl ',' formal-list .

    $default  riduzione con la regola 45 (formal-list)


Stato 131

   42 function-decl: FUNC ID @5 '(' opt-formal-list ')' ':' . domain opt-type-sect opt-const-sect opt-module-list expr-body ';'

    INTEGER  shift e prosecuzione allo stato 22
    STRING   shift e prosecuzione allo stato 23
    BOOLEAN  shift e prosecuzione allo stato 24
    ID       shift e prosecuzione allo stato 25
    ARRAY    shift e prosecuzione allo stato 26

    domain         prosecuzione allo stato 161
    atomic-domain  prosecuzione allo stato 28
    array-domain   prosecuzione allo stato 29


Stato 132

   84 expr: expr . bool-op bool-term
  112 cond-expr: IF expr . THEN expr opt-elsif-expr-list ELSE expr END

    THEN  shift e prosecuzione allo stato 162
    AND   shift e prosecuzione allo stato 135
    OR    shift e prosecuzione allo stato 136

    bool-op  prosecuzione allo stato 137


Stato 133

   84 expr: expr . bool-op bool-term
  105 factor: '(' expr . ')'

    AND  shift e prosecuzione allo stato 135
    OR   shift e prosecuzione allo stato 136
    ')'  shift e prosecuzione allo stato 163

    bool-op  prosecuzione allo stato 137


Stato 134

   75 if-stat: IF expr THEN . stat-list opt-elsif-stat-list opt-else-stat END

    BREAK   shift e prosecuzione allo stato 77
    EXIT    shift e prosecuzione allo stato 78
    IF      shift e prosecuzione allo stato 79
    WHILE   shift e prosecuzione allo stato 80
    REPEAT  shift e prosecuzione allo stato 81
    FOR     shift e prosecuzione allo stato 82
    INPUT   shift e prosecuzione allo stato 83
    OUTPUT  shift e prosecuzione allo stato 84
    ID      shift e prosecuzione allo stato 85

    stat-list       prosecuzione allo stato 164
    stat            prosecuzione allo stato 87
    input-stat      prosecuzione allo stato 88
    output-stat     prosecuzione allo stato 89
    for-stat        prosecuzione allo stato 90
    while-stat      prosecuzione allo stato 91
    repeat-stat     prosecuzione allo stato 92
    if-stat         prosecuzione allo stato 93
    assign-stat     prosecuzione allo stato 94
    left-hand-side  prosecuzione allo stato 95
    indexing        prosecuzione allo stato 96
    module-call     prosecuzione allo stato 97


Stato 135

   86 bool-op: AND .

    $default  riduzione con la regola 86 (bool-op)


Stato 136

   87 bool-op: OR .

    $default  riduzione con la regola 87 (bool-op)


Stato 137

   84 expr: expr bool-op . bool-term

    MINUS      shift e prosecuzione allo stato 104
    IF         shift e prosecuzione allo stato 105
    NOT        shift e prosecuzione allo stato 106
    INTCONST   shift e prosecuzione allo stato 50
    BOOLCONST  shift e prosecuzione allo stato 51
    STRCONST   shift e prosecuzione allo stato 52
    ID         shift e prosecuzione allo stato 85
    '['        shift e prosecuzione allo stato 53
    '('        shift e prosecuzione allo stato 107

    const           prosecuzione allo stato 108
    array-const     prosecuzione allo stato 55
    left-hand-side  prosecuzione allo stato 109
    indexing        prosecuzione allo stato 96
    bool-term       prosecuzione allo stato 165
    comp-term       prosecuzione allo stato 112
    term            prosecuzione allo stato 113
    factor          prosecuzione allo stato 114
    unary-op        prosecuzione allo stato 115
    cond-expr       prosecuzione allo stato 116
    module-call     prosecuzione allo stato 117


Stato 138

   90 comp-op: EQUAL .

    $default  riduzione con la regola 90 (comp-op)


Stato 139

   91 comp-op: NE .

    $default  riduzione con la regola 91 (comp-op)


Stato 140

   92 comp-op: GT .

    $default  riduzione con la regola 92 (comp-op)


Stato 141

   93 comp-op: GE .

    $default  riduzione con la regola 93 (comp-op)


Stato 142

   94 comp-op: KT .

    $default  riduzione con la regola 94 (comp-op)


Stato 143

   95 comp-op: KE .

    $default  riduzione con la regola 95 (comp-op)


Stato 144

   98 add-op: PLUS .

    $default  riduzione con la regola 98 (add-op)


Stato 145

   99 add-op: MINUS .

    $default  riduzione con la regola 99 (add-op)


Stato 146

   88 bool-term: comp-term comp-op . comp-term

    MINUS      shift e prosecuzione allo stato 104
    IF         shift e prosecuzione allo stato 105
    NOT        shift e prosecuzione allo stato 106
    INTCONST   shift e prosecuzione allo stato 50
    BOOLCONST  shift e prosecuzione allo stato 51
    STRCONST   shift e prosecuzione allo stato 52
    ID         shift e prosecuzione allo stato 85
    '['        shift e prosecuzione allo stato 53
    '('        shift e prosecuzione allo stato 107

    const           prosecuzione allo stato 108
    array-const     prosecuzione allo stato 55
    left-hand-side  prosecuzione allo stato 109
    indexing        prosecuzione allo stato 96
    comp-term       prosecuzione allo stato 166
    term            prosecuzione allo stato 113
    factor          prosecuzione allo stato 114
    unary-op        prosecuzione allo stato 115
    cond-expr       prosecuzione allo stato 116
    module-call     prosecuzione allo stato 117


Stato 147

   96 comp-term: comp-term add-op . term

    MINUS      shift e prosecuzione allo stato 104
    IF         shift e prosecuzione allo stato 105
    NOT        shift e prosecuzione allo stato 106
    INTCONST   shift e prosecuzione allo stato 50
    BOOLCONST  shift e prosecuzione allo stato 51
    STRCONST   shift e prosecuzione allo stato 52
    ID         shift e prosecuzione allo stato 85
    '['        shift e prosecuzione allo stato 53
    '('        shift e prosecuzione allo stato 107

    const           prosecuzione allo stato 108
    array-const     prosecuzione allo stato 55
    left-hand-side  prosecuzione allo stato 109
    indexing        prosecuzione allo stato 96
    term            prosecuzione allo stato 167
    factor          prosecuzione allo stato 114
    unary-op        prosecuzione allo stato 115
    cond-expr       prosecuzione allo stato 116
    module-call     prosecuzione allo stato 117


Stato 148

  102 mul-op: MUL .

    $default  riduzione con la regola 102 (mul-op)


Stato 149

  103 mul-op: DIV .

    $default  riduzione con la regola 103 (mul-op)


Stato 150

  100 term: term mul-op . factor

    MINUS      shift e prosecuzione allo stato 104
    IF         shift e prosecuzione allo stato 105
    NOT        shift e prosecuzione allo stato 106
    INTCONST   shift e prosecuzione allo stato 50
    BOOLCONST  shift e prosecuzione allo stato 51
    STRCONST   shift e prosecuzione allo stato 52
    ID         shift e prosecuzione allo stato 85
    '['        shift e prosecuzione allo stato 53
    '('        shift e prosecuzione allo stato 107

    const           prosecuzione allo stato 108
    array-const     prosecuzione allo stato 55
    left-hand-side  prosecuzione allo stato 109
    indexing        prosecuzione allo stato 96
    factor          prosecuzione allo stato 168
    unary-op        prosecuzione allo stato 115
    cond-expr       prosecuzione allo stato 116
    module-call     prosecuzione allo stato 117


Stato 151

  104 factor: unary-op factor .

    $default  riduzione con la regola 104 (factor)


Stato 152

   73 while-stat: WHILE expr DO . stat-list END

    BREAK   shift e prosecuzione allo stato 77
    EXIT    shift e prosecuzione allo stato 78
    IF      shift e prosecuzione allo stato 79
    WHILE   shift e prosecuzione allo stato 80
    REPEAT  shift e prosecuzione allo stato 81
    FOR     shift e prosecuzione allo stato 82
    INPUT   shift e prosecuzione allo stato 83
    OUTPUT  shift e prosecuzione allo stato 84
    ID      shift e prosecuzione allo stato 85

    stat-list       prosecuzione allo stato 169
    stat            prosecuzione allo stato 87
    input-stat      prosecuzione allo stato 88
    output-stat     prosecuzione allo stato 89
    for-stat        prosecuzione allo stato 90
    while-stat      prosecuzione allo stato 91
    repeat-stat     prosecuzione allo stato 92
    if-stat         prosecuzione allo stato 93
    assign-stat     prosecuzione allo stato 94
    left-hand-side  prosecuzione allo stato 95
    indexing        prosecuzione allo stato 96
    module-call     prosecuzione allo stato 97


Stato 153

   74 repeat-stat: REPEAT stat-list UNTIL . expr

    MINUS      shift e prosecuzione allo stato 104
    IF         shift e prosecuzione allo stato 105
    NOT        shift e prosecuzione allo stato 106
    INTCONST   shift e prosecuzione allo stato 50
    BOOLCONST  shift e prosecuzione allo stato 51
    STRCONST   shift e prosecuzione allo stato 52
    ID         shift e prosecuzione allo stato 85
    '['        shift e prosecuzione allo stato 53
    '('        shift e prosecuzione allo stato 107

    const           prosecuzione allo stato 108
    array-const     prosecuzione allo stato 55
    left-hand-side  prosecuzione allo stato 109
    indexing        prosecuzione allo stato 96
    expr            prosecuzione allo stato 170
    bool-term       prosecuzione allo stato 111
    comp-term       prosecuzione allo stato 112
    term            prosecuzione allo stato 113
    factor          prosecuzione allo stato 114
    unary-op        prosecuzione allo stato 115
    cond-expr       prosecuzione allo stato 116
    module-call     prosecuzione allo stato 117


Stato 154

   72 for-stat: FOR ID @10 . ASSIGN expr TO expr DO stat-list END

    ASSIGN  shift e prosecuzione allo stato 171


Stato 155

  116 module-call: ID @11 '(' . opt-expr-list ')'

    MINUS      shift e prosecuzione allo stato 104
    IF         shift e prosecuzione allo stato 105
    NOT        shift e prosecuzione allo stato 106
    INTCONST   shift e prosecuzione allo stato 50
    BOOLCONST  shift e prosecuzione allo stato 51
    STRCONST   shift e prosecuzione allo stato 52
    ID         shift e prosecuzione allo stato 85
    '['        shift e prosecuzione allo stato 53
    '('        shift e prosecuzione allo stato 107

    $default  riduzione con la regola 118 (opt-expr-list)

    const           prosecuzione allo stato 108
    array-const     prosecuzione allo stato 55
    left-hand-side  prosecuzione allo stato 109
    indexing        prosecuzione allo stato 96
    expr            prosecuzione allo stato 172
    bool-term       prosecuzione allo stato 111
    comp-term       prosecuzione allo stato 112
    term            prosecuzione allo stato 113
    factor          prosecuzione allo stato 114
    unary-op        prosecuzione allo stato 115
    cond-expr       prosecuzione allo stato 116
    module-call     prosecuzione allo stato 117
    opt-expr-list   prosecuzione allo stato 173
    expr-list       prosecuzione allo stato 174


Stato 156

   53 stat-body: T_BEGIN ID @6 stat-list END ID . @7

    $default  riduzione con la regola 52 (@7)

    @7  prosecuzione allo stato 175


Stato 157

   57 stat-list: stat ';' stat-list .

    $default  riduzione con la regola 57 (stat-list)


Stato 158

   80 assign-stat: left-hand-side ASSIGN expr .
   84 expr: expr . bool-op bool-term

    AND  shift e prosecuzione allo stato 135
    OR   shift e prosecuzione allo stato 136

    $default  riduzione con la regola 80 (assign-stat)

    bool-op  prosecuzione allo stato 137


Stato 159

   83 indexing: left-hand-side '[' expr . ']'
   84 expr: expr . bool-op bool-term

    AND  shift e prosecuzione allo stato 135
    OR   shift e prosecuzione allo stato 136
    ']'  shift e prosecuzione allo stato 176

    bool-op  prosecuzione allo stato 137


Stato 160

   40 procedure-decl: PROC ID @4 '(' opt-formal-list ')' opt-type-sect opt-var-sect . opt-const-sect opt-module-list stat-body ';'

    CONST  shift e prosecuzione allo stato 18

    $default  riduzione con la regola 22 (opt-const-sect)

    opt-const-sect  prosecuzione allo stato 177


Stato 161

   42 function-decl: FUNC ID @5 '(' opt-formal-list ')' ':' domain . opt-type-sect opt-const-sect opt-module-list expr-body ';'

    TYPE  shift e prosecuzione allo stato 6

    $default  riduzione con la regola 4 (opt-type-sect)

    opt-type-sect  prosecuzione allo stato 178


Stato 162

  112 cond-expr: IF expr THEN . expr opt-elsif-expr-list ELSE expr END

    MINUS      shift e prosecuzione allo stato 104
    IF         shift e prosecuzione allo stato 105
    NOT        shift e prosecuzione allo stato 106
    INTCONST   shift e prosecuzione allo stato 50
    BOOLCONST  shift e prosecuzione allo stato 51
    STRCONST   shift e prosecuzione allo stato 52
    ID         shift e prosecuzione allo stato 85
    '['        shift e prosecuzione allo stato 53
    '('        shift e prosecuzione allo stato 107

    const           prosecuzione allo stato 108
    array-const     prosecuzione allo stato 55
    left-hand-side  prosecuzione allo stato 109
    indexing        prosecuzione allo stato 96
    expr            prosecuzione allo stato 179
    bool-term       prosecuzione allo stato 111
    comp-term       prosecuzione allo stato 112
    term            prosecuzione allo stato 113
    factor          prosecuzione allo stato 114
    unary-op        prosecuzione allo stato 115
    cond-expr       prosecuzione allo stato 116
    module-call     prosecuzione allo stato 117


Stato 163

  105 factor: '(' expr ')' .

    $default  riduzione con la regola 105 (factor)


Stato 164

   75 if-stat: IF expr THEN stat-list . opt-elsif-stat-list opt-else-stat END

    ELSIF  shift e prosecuzione allo stato 180

    $default  riduzione con la regola 77 (opt-elsif-stat-list)

    opt-elsif-stat-list  prosecuzione allo stato 181


Stato 165

   84 expr: expr bool-op bool-term .

    $default  riduzione con la regola 84 (expr)


Stato 166

   88 bool-term: comp-term comp-op comp-term .
   96 comp-term: comp-term . add-op term

    PLUS   shift e prosecuzione allo stato 144
    MINUS  shift e prosecuzione allo stato 145

    $default  riduzione con la regola 88 (bool-term)

    add-op  prosecuzione allo stato 147


Stato 167

   96 comp-term: comp-term add-op term .
  100 term: term . mul-op factor

    MUL  shift e prosecuzione allo stato 148
    DIV  shift e prosecuzione allo stato 149

    $default  riduzione con la regola 96 (comp-term)

    mul-op  prosecuzione allo stato 150


Stato 168

  100 term: term mul-op factor .

    $default  riduzione con la regola 100 (term)


Stato 169

   73 while-stat: WHILE expr DO stat-list . END

    END  shift e prosecuzione allo stato 182


Stato 170

   74 repeat-stat: REPEAT stat-list UNTIL expr .
   84 expr: expr . bool-op bool-term

    AND  shift e prosecuzione allo stato 135
    OR   shift e prosecuzione allo stato 136

    $default  riduzione con la regola 74 (repeat-stat)

    bool-op  prosecuzione allo stato 137


Stato 171

   72 for-stat: FOR ID @10 ASSIGN . expr TO expr DO stat-list END

    MINUS      shift e prosecuzione allo stato 104
    IF         shift e prosecuzione allo stato 105
    NOT        shift e prosecuzione allo stato 106
    INTCONST   shift e prosecuzione allo stato 50
    BOOLCONST  shift e prosecuzione allo stato 51
    STRCONST   shift e prosecuzione allo stato 52
    ID         shift e prosecuzione allo stato 85
    '['        shift e prosecuzione allo stato 53
    '('        shift e prosecuzione allo stato 107

    const           prosecuzione allo stato 108
    array-const     prosecuzione allo stato 55
    left-hand-side  prosecuzione allo stato 109
    indexing        prosecuzione allo stato 96
    expr            prosecuzione allo stato 183
    bool-term       prosecuzione allo stato 111
    comp-term       prosecuzione allo stato 112
    term            prosecuzione allo stato 113
    factor          prosecuzione allo stato 114
    unary-op        prosecuzione allo stato 115
    cond-expr       prosecuzione allo stato 116
    module-call     prosecuzione allo stato 117


Stato 172

   84 expr: expr . bool-op bool-term
  119 expr-list: expr . ',' expr-list
  120          | expr .

    AND  shift e prosecuzione allo stato 135
    OR   shift e prosecuzione allo stato 136
    ','  shift e prosecuzione allo stato 184

    $default  riduzione con la regola 120 (expr-list)

    bool-op  prosecuzione allo stato 137


Stato 173

  116 module-call: ID @11 '(' opt-expr-list . ')'

    ')'  shift e prosecuzione allo stato 185


Stato 174

  117 opt-expr-list: expr-list .

    $default  riduzione con la regola 117 (opt-expr-list)


Stato 175

   53 stat-body: T_BEGIN ID @6 stat-list END ID @7 .

    $default  riduzione con la regola 53 (stat-body)


Stato 176

   83 indexing: left-hand-side '[' expr ']' .

    $default  riduzione con la regola 83 (indexing)


Stato 177

   40 procedure-decl: PROC ID @4 '(' opt-formal-list ')' opt-type-sect opt-var-sect opt-const-sect . opt-module-list stat-body ';'

    PROC  shift e prosecuzione allo stato 33
    FUNC  shift e prosecuzione allo stato 34

    $default  riduzione con la regola 34 (opt-module-list)

    opt-module-list  prosecuzione allo stato 186
    module-list      prosecuzione allo stato 36
    module-decl      prosecuzione allo stato 37
    procedure-decl   prosecuzione allo stato 38
    function-decl    prosecuzione allo stato 39


Stato 178

   42 function-decl: FUNC ID @5 '(' opt-formal-list ')' ':' domain opt-type-sect . opt-const-sect opt-module-list expr-body ';'

    CONST  shift e prosecuzione allo stato 18

    $default  riduzione con la regola 22 (opt-const-sect)

    opt-const-sect  prosecuzione allo stato 187


Stato 179

   84 expr: expr . bool-op bool-term
  112 cond-expr: IF expr THEN expr . opt-elsif-expr-list ELSE expr END

    ELSIF  shift e prosecuzione allo stato 188
    AND    shift e prosecuzione allo stato 135
    OR     shift e prosecuzione allo stato 136

    $default  riduzione con la regola 114 (opt-elsif-expr-list)

    bool-op              prosecuzione allo stato 137
    opt-elsif-expr-list  prosecuzione allo stato 189


Stato 180

   76 opt-elsif-stat-list: ELSIF . expr THEN stat-list opt-elsif-stat-list

    MINUS      shift e prosecuzione allo stato 104
    IF         shift e prosecuzione allo stato 105
    NOT        shift e prosecuzione allo stato 106
    INTCONST   shift e prosecuzione allo stato 50
    BOOLCONST  shift e prosecuzione allo stato 51
    STRCONST   shift e prosecuzione allo stato 52
    ID         shift e prosecuzione allo stato 85
    '['        shift e prosecuzione allo stato 53
    '('        shift e prosecuzione allo stato 107

    const           prosecuzione allo stato 108
    array-const     prosecuzione allo stato 55
    left-hand-side  prosecuzione allo stato 109
    indexing        prosecuzione allo stato 96
    expr            prosecuzione allo stato 190
    bool-term       prosecuzione allo stato 111
    comp-term       prosecuzione allo stato 112
    term            prosecuzione allo stato 113
    factor          prosecuzione allo stato 114
    unary-op        prosecuzione allo stato 115
    cond-expr       prosecuzione allo stato 116
    module-call     prosecuzione allo stato 117


Stato 181

   75 if-stat: IF expr THEN stat-list opt-elsif-stat-list . opt-else-stat END

    ELSE  shift e prosecuzione allo stato 191

    $default  riduzione con la regola 79 (opt-else-stat)

    opt-else-stat  prosecuzione allo stato 192


Stato 182

   73 while-stat: WHILE expr DO stat-list END .

    $default  riduzione con la regola 73 (while-stat)


Stato 183

   72 for-stat: FOR ID @10 ASSIGN expr . TO expr DO stat-list END
   84 expr: expr . bool-op bool-term

    TO   shift e prosecuzione allo stato 193
    AND  shift e prosecuzione allo stato 135
    OR   shift e prosecuzione allo stato 136

    bool-op  prosecuzione allo stato 137


Stato 184

  119 expr-list: expr ',' . expr-list

    MINUS      shift e prosecuzione allo stato 104
    IF         shift e prosecuzione allo stato 105
    NOT        shift e prosecuzione allo stato 106
    INTCONST   shift e prosecuzione allo stato 50
    BOOLCONST  shift e prosecuzione allo stato 51
    STRCONST   shift e prosecuzione allo stato 52
    ID         shift e prosecuzione allo stato 85
    '['        shift e prosecuzione allo stato 53
    '('        shift e prosecuzione allo stato 107

    const           prosecuzione allo stato 108
    array-const     prosecuzione allo stato 55
    left-hand-side  prosecuzione allo stato 109
    indexing        prosecuzione allo stato 96
    expr            prosecuzione allo stato 172
    bool-term       prosecuzione allo stato 111
    comp-term       prosecuzione allo stato 112
    term            prosecuzione allo stato 113
    factor          prosecuzione allo stato 114
    unary-op        prosecuzione allo stato 115
    cond-expr       prosecuzione allo stato 116
    module-call     prosecuzione allo stato 117
    expr-list       prosecuzione allo stato 194


Stato 185

  116 module-call: ID @11 '(' opt-expr-list ')' .

    $default  riduzione con la regola 116 (module-call)


Stato 186

   40 procedure-decl: PROC ID @4 '(' opt-formal-list ')' opt-type-sect opt-var-sect opt-const-sect opt-module-list . stat-body ';'

    T_BEGIN  shift e prosecuzione allo stato 46

    stat-body  prosecuzione allo stato 195


Stato 187

   42 function-decl: FUNC ID @5 '(' opt-formal-list ')' ':' domain opt-type-sect opt-const-sect . opt-module-list expr-body ';'

    PROC  shift e prosecuzione allo stato 33
    FUNC  shift e prosecuzione allo stato 34

    $default  riduzione con la regola 34 (opt-module-list)

    opt-module-list  prosecuzione allo stato 196
    module-list      prosecuzione allo stato 36
    module-decl      prosecuzione allo stato 37
    procedure-decl   prosecuzione allo stato 38
    function-decl    prosecuzione allo stato 39


Stato 188

  113 opt-elsif-expr-list: ELSIF . expr THEN expr opt-elsif-expr-list

    MINUS      shift e prosecuzione allo stato 104
    IF         shift e prosecuzione allo stato 105
    NOT        shift e prosecuzione allo stato 106
    INTCONST   shift e prosecuzione allo stato 50
    BOOLCONST  shift e prosecuzione allo stato 51
    STRCONST   shift e prosecuzione allo stato 52
    ID         shift e prosecuzione allo stato 85
    '['        shift e prosecuzione allo stato 53
    '('        shift e prosecuzione allo stato 107

    const           prosecuzione allo stato 108
    array-const     prosecuzione allo stato 55
    left-hand-side  prosecuzione allo stato 109
    indexing        prosecuzione allo stato 96
    expr            prosecuzione allo stato 197
    bool-term       prosecuzione allo stato 111
    comp-term       prosecuzione allo stato 112
    term            prosecuzione allo stato 113
    factor          prosecuzione allo stato 114
    unary-op        prosecuzione allo stato 115
    cond-expr       prosecuzione allo stato 116
    module-call     prosecuzione allo stato 117


Stato 189

  112 cond-expr: IF expr THEN expr opt-elsif-expr-list . ELSE expr END

    ELSE  shift e prosecuzione allo stato 198


Stato 190

   76 opt-elsif-stat-list: ELSIF expr . THEN stat-list opt-elsif-stat-list
   84 expr: expr . bool-op bool-term

    THEN  shift e prosecuzione allo stato 199
    AND   shift e prosecuzione allo stato 135
    OR    shift e prosecuzione allo stato 136

    bool-op  prosecuzione allo stato 137


Stato 191

   78 opt-else-stat: ELSE . stat-list

    BREAK   shift e prosecuzione allo stato 77
    EXIT    shift e prosecuzione allo stato 78
    IF      shift e prosecuzione allo stato 79
    WHILE   shift e prosecuzione allo stato 80
    REPEAT  shift e prosecuzione allo stato 81
    FOR     shift e prosecuzione allo stato 82
    INPUT   shift e prosecuzione allo stato 83
    OUTPUT  shift e prosecuzione allo stato 84
    ID      shift e prosecuzione allo stato 85

    stat-list       prosecuzione allo stato 200
    stat            prosecuzione allo stato 87
    input-stat      prosecuzione allo stato 88
    output-stat     prosecuzione allo stato 89
    for-stat        prosecuzione allo stato 90
    while-stat      prosecuzione allo stato 91
    repeat-stat     prosecuzione allo stato 92
    if-stat         prosecuzione allo stato 93
    assign-stat     prosecuzione allo stato 94
    left-hand-side  prosecuzione allo stato 95
    indexing        prosecuzione allo stato 96
    module-call     prosecuzione allo stato 97


Stato 192

   75 if-stat: IF expr THEN stat-list opt-elsif-stat-list opt-else-stat . END

    END  shift e prosecuzione allo stato 201


Stato 193

   72 for-stat: FOR ID @10 ASSIGN expr TO . expr DO stat-list END

    MINUS      shift e prosecuzione allo stato 104
    IF         shift e prosecuzione allo stato 105
    NOT        shift e prosecuzione allo stato 106
    INTCONST   shift e prosecuzione allo stato 50
    BOOLCONST  shift e prosecuzione allo stato 51
    STRCONST   shift e prosecuzione allo stato 52
    ID         shift e prosecuzione allo stato 85
    '['        shift e prosecuzione allo stato 53
    '('        shift e prosecuzione allo stato 107

    const           prosecuzione allo stato 108
    array-const     prosecuzione allo stato 55
    left-hand-side  prosecuzione allo stato 109
    indexing        prosecuzione allo stato 96
    expr            prosecuzione allo stato 202
    bool-term       prosecuzione allo stato 111
    comp-term       prosecuzione allo stato 112
    term            prosecuzione allo stato 113
    factor          prosecuzione allo stato 114
    unary-op        prosecuzione allo stato 115
    cond-expr       prosecuzione allo stato 116
    module-call     prosecuzione allo stato 117


Stato 194

  119 expr-list: expr ',' expr-list .

    $default  riduzione con la regola 119 (expr-list)


Stato 195

   40 procedure-decl: PROC ID @4 '(' opt-formal-list ')' opt-type-sect opt-var-sect opt-const-sect opt-module-list stat-body . ';'

    ';'  shift e prosecuzione allo stato 203


Stato 196

   42 function-decl: FUNC ID @5 '(' opt-formal-list ')' ':' domain opt-type-sect opt-const-sect opt-module-list . expr-body ';'

    T_BEGIN  shift e prosecuzione allo stato 204

    expr-body  prosecuzione allo stato 205


Stato 197

   84 expr: expr . bool-op bool-term
  113 opt-elsif-expr-list: ELSIF expr . THEN expr opt-elsif-expr-list

    THEN  shift e prosecuzione allo stato 206
    AND   shift e prosecuzione allo stato 135
    OR    shift e prosecuzione allo stato 136

    bool-op  prosecuzione allo stato 137


Stato 198

  112 cond-expr: IF expr THEN expr opt-elsif-expr-list ELSE . expr END

    MINUS      shift e prosecuzione allo stato 104
    IF         shift e prosecuzione allo stato 105
    NOT        shift e prosecuzione allo stato 106
    INTCONST   shift e prosecuzione allo stato 50
    BOOLCONST  shift e prosecuzione allo stato 51
    STRCONST   shift e prosecuzione allo stato 52
    ID         shift e prosecuzione allo stato 85
    '['        shift e prosecuzione allo stato 53
    '('        shift e prosecuzione allo stato 107

    const           prosecuzione allo stato 108
    array-const     prosecuzione allo stato 55
    left-hand-side  prosecuzione allo stato 109
    indexing        prosecuzione allo stato 96
    expr            prosecuzione allo stato 207
    bool-term       prosecuzione allo stato 111
    comp-term       prosecuzione allo stato 112
    term            prosecuzione allo stato 113
    factor          prosecuzione allo stato 114
    unary-op        prosecuzione allo stato 115
    cond-expr       prosecuzione allo stato 116
    module-call     prosecuzione allo stato 117


Stato 199

   76 opt-elsif-stat-list: ELSIF expr THEN . stat-list opt-elsif-stat-list

    BREAK   shift e prosecuzione allo stato 77
    EXIT    shift e prosecuzione allo stato 78
    IF      shift e prosecuzione allo stato 79
    WHILE   shift e prosecuzione allo stato 80
    REPEAT  shift e prosecuzione allo stato 81
    FOR     shift e prosecuzione allo stato 82
    INPUT   shift e prosecuzione allo stato 83
    OUTPUT  shift e prosecuzione allo stato 84
    ID      shift e prosecuzione allo stato 85

    stat-list       prosecuzione allo stato 208
    stat            prosecuzione allo stato 87
    input-stat      prosecuzione allo stato 88
    output-stat     prosecuzione allo stato 89
    for-stat        prosecuzione allo stato 90
    while-stat      prosecuzione allo stato 91
    repeat-stat     prosecuzione allo stato 92
    if-stat         prosecuzione allo stato 93
    assign-stat     prosecuzione allo stato 94
    left-hand-side  prosecuzione allo stato 95
    indexing        prosecuzione allo stato 96
    module-call     prosecuzione allo stato 97


Stato 200

   78 opt-else-stat: ELSE stat-list .

    $default  riduzione con la regola 78 (opt-else-stat)


Stato 201

   75 if-stat: IF expr THEN stat-list opt-elsif-stat-list opt-else-stat END .

    $default  riduzione con la regola 75 (if-stat)


Stato 202

   72 for-stat: FOR ID @10 ASSIGN expr TO expr . DO stat-list END
   84 expr: expr . bool-op bool-term

    DO   shift e prosecuzione allo stato 209
    AND  shift e prosecuzione allo stato 135
    OR   shift e prosecuzione allo stato 136

    bool-op  prosecuzione allo stato 137


Stato 203

   40 procedure-decl: PROC ID @4 '(' opt-formal-list ')' opt-type-sect opt-var-sect opt-const-sect opt-module-list stat-body ';' .

    $default  riduzione con la regola 40 (procedure-decl)


Stato 204

   56 expr-body: T_BEGIN . ID @8 expr END ID @9

    ID  shift e prosecuzione allo stato 210


Stato 205

   42 function-decl: FUNC ID @5 '(' opt-formal-list ')' ':' domain opt-type-sect opt-const-sect opt-module-list expr-body . ';'

    ';'  shift e prosecuzione allo stato 211


Stato 206

  113 opt-elsif-expr-list: ELSIF expr THEN . expr opt-elsif-expr-list

    MINUS      shift e prosecuzione allo stato 104
    IF         shift e prosecuzione allo stato 105
    NOT        shift e prosecuzione allo stato 106
    INTCONST   shift e prosecuzione allo stato 50
    BOOLCONST  shift e prosecuzione allo stato 51
    STRCONST   shift e prosecuzione allo stato 52
    ID         shift e prosecuzione allo stato 85
    '['        shift e prosecuzione allo stato 53
    '('        shift e prosecuzione allo stato 107

    const           prosecuzione allo stato 108
    array-const     prosecuzione allo stato 55
    left-hand-side  prosecuzione allo stato 109
    indexing        prosecuzione allo stato 96
    expr            prosecuzione allo stato 212
    bool-term       prosecuzione allo stato 111
    comp-term       prosecuzione allo stato 112
    term            prosecuzione allo stato 113
    factor          prosecuzione allo stato 114
    unary-op        prosecuzione allo stato 115
    cond-expr       prosecuzione allo stato 116
    module-call     prosecuzione allo stato 117


Stato 207

   84 expr: expr . bool-op bool-term
  112 cond-expr: IF expr THEN expr opt-elsif-expr-list ELSE expr . END

    END  shift e prosecuzione allo stato 213
    AND  shift e prosecuzione allo stato 135
    OR   shift e prosecuzione allo stato 136

    bool-op  prosecuzione allo stato 137


Stato 208

   76 opt-elsif-stat-list: ELSIF expr THEN stat-list . opt-elsif-stat-list

    ELSIF  shift e prosecuzione allo stato 180

    $default  riduzione con la regola 77 (opt-elsif-stat-list)

    opt-elsif-stat-list  prosecuzione allo stato 214


Stato 209

   72 for-stat: FOR ID @10 ASSIGN expr TO expr DO . stat-list END

    BREAK   shift e prosecuzione allo stato 77
    EXIT    shift e prosecuzione allo stato 78
    IF      shift e prosecuzione allo stato 79
    WHILE   shift e prosecuzione allo stato 80
    REPEAT  shift e prosecuzione allo stato 81
    FOR     shift e prosecuzione allo stato 82
    INPUT   shift e prosecuzione allo stato 83
    OUTPUT  shift e prosecuzione allo stato 84
    ID      shift e prosecuzione allo stato 85

    stat-list       prosecuzione allo stato 215
    stat            prosecuzione allo stato 87
    input-stat      prosecuzione allo stato 88
    output-stat     prosecuzione allo stato 89
    for-stat        prosecuzione allo stato 90
    while-stat      prosecuzione allo stato 91
    repeat-stat     prosecuzione allo stato 92
    if-stat         prosecuzione allo stato 93
    assign-stat     prosecuzione allo stato 94
    left-hand-side  prosecuzione allo stato 95
    indexing        prosecuzione allo stato 96
    module-call     prosecuzione allo stato 97


Stato 210

   56 expr-body: T_BEGIN ID . @8 expr END ID @9

    $default  riduzione con la regola 54 (@8)

    @8  prosecuzione allo stato 216


Stato 211

   42 function-decl: FUNC ID @5 '(' opt-formal-list ')' ':' domain opt-type-sect opt-const-sect opt-module-list expr-body ';' .

    $default  riduzione con la regola 42 (function-decl)


Stato 212

   84 expr: expr . bool-op bool-term
  113 opt-elsif-expr-list: ELSIF expr THEN expr . opt-elsif-expr-list

    ELSIF  shift e prosecuzione allo stato 188
    AND    shift e prosecuzione allo stato 135
    OR     shift e prosecuzione allo stato 136

    $default  riduzione con la regola 114 (opt-elsif-expr-list)

    bool-op              prosecuzione allo stato 137
    opt-elsif-expr-list  prosecuzione allo stato 217


Stato 213

  112 cond-expr: IF expr THEN expr opt-elsif-expr-list ELSE expr END .

    $default  riduzione con la regola 112 (cond-expr)


Stato 214

   76 opt-elsif-stat-list: ELSIF expr THEN stat-list opt-elsif-stat-list .

    $default  riduzione con la regola 76 (opt-elsif-stat-list)


Stato 215

   72 for-stat: FOR ID @10 ASSIGN expr TO expr DO stat-list . END

    END  shift e prosecuzione allo stato 218


Stato 216

   56 expr-body: T_BEGIN ID @8 . expr END ID @9

    MINUS      shift e prosecuzione allo stato 104
    IF         shift e prosecuzione allo stato 105
    NOT        shift e prosecuzione allo stato 106
    INTCONST   shift e prosecuzione allo stato 50
    BOOLCONST  shift e prosecuzione allo stato 51
    STRCONST   shift e prosecuzione allo stato 52
    ID         shift e prosecuzione allo stato 85
    '['        shift e prosecuzione allo stato 53
    '('        shift e prosecuzione allo stato 107

    const           prosecuzione allo stato 108
    array-const     prosecuzione allo stato 55
    left-hand-side  prosecuzione allo stato 109
    indexing        prosecuzione allo stato 96
    expr            prosecuzione allo stato 219
    bool-term       prosecuzione allo stato 111
    comp-term       prosecuzione allo stato 112
    term            prosecuzione allo stato 113
    factor          prosecuzione allo stato 114
    unary-op        prosecuzione allo stato 115
    cond-expr       prosecuzione allo stato 116
    module-call     prosecuzione allo stato 117


Stato 217

  113 opt-elsif-expr-list: ELSIF expr THEN expr opt-elsif-expr-list .

    $default  riduzione con la regola 113 (opt-elsif-expr-list)


Stato 218

   72 for-stat: FOR ID @10 ASSIGN expr TO expr DO stat-list END .

    $default  riduzione con la regola 72 (for-stat)


Stato 219

   56 expr-body: T_BEGIN ID @8 expr . END ID @9
   84 expr: expr . bool-op bool-term

    END  shift e prosecuzione allo stato 220
    AND  shift e prosecuzione allo stato 135
    OR   shift e prosecuzione allo stato 136

    bool-op  prosecuzione allo stato 137


Stato 220

   56 expr-body: T_BEGIN ID @8 expr END . ID @9

    ID  shift e prosecuzione allo stato 221


Stato 221

   56 expr-body: T_BEGIN ID @8 expr END ID . @9

    $default  riduzione con la regola 55 (@9)

    @9  prosecuzione allo stato 222


Stato 222

   56 expr-body: T_BEGIN ID @8 expr END ID @9 .

    $default  riduzione con la regola 56 (expr-body)
